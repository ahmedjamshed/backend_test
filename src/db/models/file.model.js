const mongoose = require('mongoose');

const { Schema } = mongoose;

const fileSchema = new Schema({
	title: { type: String, required: true },
	description: { type: String, required: true },
	data_link: { type: String, required: true },
	thumbnail: [
		{
			size: { type: String, required: true },
			preview_data_link: { type: String, required: true },
		},
	],
	metadata: [
		{
			key: { type: String, required: true },
			value: { type: String, required: true },
		},
	],
	extension: {
		type: String,
		enum: [
			'3gp',
			'ai',
			'avi',
			'bmp',
			'cat',
			'cdr',
			'cod',
			'cpt',
			'csv',
			'dcm',
			'doc',
			'docx',
			'dpt',
			'dwg',
			'dxf',
			'eps',
			'exp',
			'flv',
			'gif',
			'hwp',
			'ico',
			'igs',
			'ipt',
			'jpeg',
			'jpg',
			'kit',
			'kmz',
			'm4a',
			'mdl',
			'mobi',
			'mod',
			'mov',
			'mkv',
			'mp3',
			'mp4',
			'mpeg4',
			'msg',
			'oad',
			'odt',
			'ogg',
			'org',
			'ott',
			'pdf',
			'png',
			'pps',
			'ppsx',
			'ppt',
			'pptx',
			'prt',
			'psd',
			'pub',
			'rar',
			'rtf',
			'step',
			'stf',
			'stl',
			'stl',
			'stp',
			'stp',
			'tif',
			'tiff',
			'txt',
			'wav',
			'wmv',
			'wpd',
			'wps',
			'x_t',
			'xls',
			'xlsx',
			'zip',
		],
		default: null,
	},
	icon: {
		type: String,
		enum: ['picture', 'video', 'document', 'archive'],
		default: null,
	},
	file_create_date: { type: Schema.Types.Date, default: Date.now, required: true },
});

fileSchema.methods.getThumbnail = function (size) {
	return (this.thumbnail || []).find(thumbnail => thumbnail.size === size);
};

module.exports = mongoose.model('File', fileSchema);
